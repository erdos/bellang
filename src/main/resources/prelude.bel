
(set mac
   (lit mac (lit clo nil (name args body)
        `(set ,name (lit mac (lit clo nil ,args ,body))))))

(mac fn (args body) `(lit clo ,scope ,args ,body))

(mac def (name args body) `(set ,name (fn ,args ,body)))

(def join ((o x) (o y)) (join x y))
(def car (x) (car x))
(def cdr (x) (cdr x))

(mac lit (x) `(lit ,x))

(mac let (k v body) `((fn (,k) ,body) ,v))

(def cadr (x) (car (cdr x)))
(def caar (x) (car (car x)))
(def cdar (x) (cdr (car x)))
(def cddr (x) (cdr (cdr x)))

(def nom (x) (nom x))